import { type OneToManyOptions } from './OneToMany';
import type { AnyString, EntityName } from '../typings';
export declare function OneToOne<T, O>(entity?: OneToOneOptions<T, O> | string | ((e?: any) => EntityName<T>), mappedByOrOptions?: (string & keyof T) | ((e: T) => any) | Partial<OneToOneOptions<T, O>>, options?: Partial<OneToOneOptions<T, O>>): (target: Partial<any>, propertyName: string) => any;
export interface OneToOneOptions<T, O> extends Partial<Omit<OneToManyOptions<T, O>, 'orderBy'>> {
    owner?: boolean;
    inversedBy?: (string & keyof T) | ((e: T) => any);
    /** @deprecated use `ref` instead, `wrappedReference` option will be removed in v6 */
    wrappedReference?: boolean;
    ref?: boolean;
    primary?: boolean;
    mapToPk?: boolean;
    onDelete?: 'cascade' | 'no action' | 'set null' | 'set default' | AnyString;
    onUpdateIntegrity?: 'cascade' | 'no action' | 'set null' | 'set default' | AnyString;
}
