"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serialize = exports.EntitySerializer = void 0;
const wrap_1 = require("../entity/wrap");
const Utils_1 = require("../utils/Utils");
const enums_1 = require("../enums");
const Reference_1 = require("../entity/Reference");
const SerializationContext_1 = require("./SerializationContext");
function isVisible(meta, propName, options) {
    if (options.populate === true) {
        return options.populate;
    }
    if (Array.isArray(options.populate) && options.populate?.find(item => item === propName || item.startsWith(propName + '.'))) {
        return true;
    }
    if (options.exclude?.find(item => item === propName)) {
        return false;
    }
    const prop = meta.properties[propName];
    const visible = prop && !prop.hidden;
    const prefixed = prop && !prop.primary && propName.startsWith('_'); // ignore prefixed properties, if it's not a PK
    return visible && !prefixed;
}
function isPopulated(entity, propName, options) {
    if (typeof options.populate !== 'boolean' && options.populate?.find(item => item === propName || item.startsWith(propName + '.'))) {
        return true;
    }
    if (typeof options.populate === 'boolean') {
        return options.populate;
    }
    return false;
}
class EntitySerializer {
    static serialize(entity, options = {}) {
        const wrapped = (0, wrap_1.helper)(entity);
        const meta = wrapped.__meta;
        let contextCreated = false;
        if (!wrapped.__serializationContext.root) {
            const root = new SerializationContext_1.SerializationContext();
            SerializationContext_1.SerializationContext.propagate(root, entity, (meta, prop) => meta.properties[prop]?.reference !== enums_1.ReferenceType.SCALAR);
            contextCreated = true;
        }
        const root = wrapped.__serializationContext.root;
        const ret = {};
        const keys = new Set(meta.primaryKeys);
        Object.keys(entity).forEach(prop => keys.add(prop));
        const visited = root.visited.has(entity);
        if (!visited) {
            root.visited.add(entity);
        }
        [...keys]
            .filter(prop => isVisible(meta, prop, options))
            .map(prop => {
            const cycle = root.visit(meta.className, prop);
            if (cycle && visited) {
                return [prop, undefined];
            }
            const val = this.processProperty(prop, entity, options);
            if (!cycle) {
                root.leave(meta.className, prop);
            }
            if (options.skipNull && Utils_1.Utils.isPlainObject(val)) {
                Utils_1.Utils.dropUndefinedProperties(val, null);
            }
            return [prop, val];
        })
            .filter(([, value]) => typeof value !== 'undefined' && !(value === null && options.skipNull))
            .forEach(([prop, value]) => ret[this.propertyName(meta, prop, wrapped.__platform)] = value);
        if (contextCreated) {
            root.close();
        }
        if (!wrapped.isInitialized()) {
            return ret;
        }
        // decorated getters
        meta.props
            .filter(prop => prop.getter && typeof entity[prop.name] !== 'undefined' && isVisible(meta, prop.name, options))
            .forEach(prop => ret[this.propertyName(meta, prop.name, wrapped.__platform)] = entity[prop.name]);
        // decorated get methods
        meta.props
            .filter(prop => prop.getterName && entity[prop.getterName] instanceof Function && isVisible(meta, prop.name, options))
            .forEach(prop => ret[this.propertyName(meta, prop.name, wrapped.__platform)] = entity[prop.getterName]());
        return ret;
    }
    static propertyName(meta, prop, platform) {
        /* istanbul ignore next */
        if (meta.properties[prop]?.serializedName) {
            return meta.properties[prop].serializedName;
        }
        if (meta.properties[prop]?.primary && platform) {
            return platform.getSerializedPrimaryKeyField(prop);
        }
        return prop;
    }
    static processProperty(prop, entity, options) {
        const parts = prop.split('.');
        prop = parts[0];
        const wrapped = (0, wrap_1.helper)(entity);
        const property = wrapped.__meta.properties[prop];
        const serializer = property?.serializer;
        /* istanbul ignore next */
        if (!options.ignoreSerializers && serializer) {
            return serializer(entity[prop]);
        }
        if (Utils_1.Utils.isCollection(entity[prop])) {
            return this.processCollection(prop, entity, options);
        }
        if (Utils_1.Utils.isEntity(entity[prop], true)) {
            return this.processEntity(prop, entity, wrapped.__platform, options);
        }
        /* istanbul ignore next */
        if (property?.reference === enums_1.ReferenceType.EMBEDDED) {
            if (Array.isArray(entity[prop])) {
                return entity[prop].map(item => (0, wrap_1.helper)(item).toJSON());
            }
            if (Utils_1.Utils.isObject(entity[prop])) {
                return (0, wrap_1.helper)(entity[prop]).toJSON();
            }
        }
        const customType = property?.customType;
        if (customType) {
            return customType.toJSON(entity[prop], wrapped.__platform);
        }
        return wrapped.__platform.normalizePrimaryKey(entity[prop]);
    }
    static extractChildOptions(options, prop) {
        const extractChildElements = (items) => {
            return items
                .filter(field => field.startsWith(`${prop}.`))
                .map(field => field.substring(prop.length + 1));
        };
        return {
            ...options,
            populate: Array.isArray(options.populate) ? extractChildElements(options.populate) : options.populate,
            exclude: Array.isArray(options.exclude) ? extractChildElements(options.exclude) : options.exclude,
        };
    }
    static processEntity(prop, entity, platform, options) {
        const child = Reference_1.Reference.unwrapReference(entity[prop]);
        const wrapped = (0, wrap_1.helper)(child);
        const populated = isPopulated(child, prop, options) && wrapped.isInitialized();
        const expand = populated || options.forceObject || !wrapped.__managed;
        if (expand) {
            return this.serialize(child, this.extractChildOptions(options, prop));
        }
        return platform.normalizePrimaryKey(wrapped.getPrimaryKey());
    }
    static processCollection(prop, entity, options) {
        const col = entity[prop];
        if (!col.isInitialized()) {
            return undefined;
        }
        return col.getItems(false).map(item => {
            if (isPopulated(item, prop, options)) {
                return this.serialize(item, this.extractChildOptions(options, prop));
            }
            return (0, wrap_1.helper)(item).getPrimaryKey();
        });
    }
}
exports.EntitySerializer = EntitySerializer;
/**
 * Converts entity instance to POJO, converting the `Collection`s to arrays and unwrapping the `Reference` wrapper, while respecting the serialization options.
 */
function serialize(entities, options) {
    const ret = Utils_1.Utils.asArray(entities).map(e => EntitySerializer.serialize(e, options));
    if (Array.isArray(entities)) {
        return ret;
    }
    return ret[0];
}
exports.serialize = serialize;
