import { type IdentifiedReference } from './Reference';
import type { AutoPath, EntityData, EntityDTO, Loaded } from '../typings';
import { type AssignOptions } from './EntityAssigner';
import type { EntityLoaderOptions } from './EntityLoader';
export declare abstract class BaseEntity<Entity extends object, Primary extends keyof Entity, Populate extends string = string> {
    isInitialized(): boolean;
    isTouched(): boolean;
    populated(populated?: boolean): void;
    populate<This extends this, Hint extends string = never>(populate: AutoPath<This, Hint>[] | boolean, options?: EntityLoaderOptions<This, Hint>): Promise<Loaded<This, Hint>>;
    toReference(): IdentifiedReference<Entity, Primary>;
    toObject(ignoreFields?: string[]): EntityDTO<this>;
    toJSON(...args: any[]): EntityDTO<this>;
    toPOJO(): EntityDTO<this>;
    assign(data: EntityData<Entity>, options?: AssignOptions): Entity;
    init<Populate extends string = never>(populated?: boolean): Promise<Loaded<Entity, Populate>>;
    getSchema(): string | undefined;
    setSchema(schema?: string): void;
}
