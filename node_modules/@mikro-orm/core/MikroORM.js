"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MikroORM = void 0;
const metadata_1 = require("./metadata");
const utils_1 = require("./utils");
const logging_1 = require("./logging");
const cache_1 = require("./cache");
/**
 * Helper class for bootstrapping the MikroORM.
 */
class MikroORM {
    /**
     * Initialize the ORM, load entity metadata, create EntityManager and connect to the database.
     * If you omit the `options` parameter, your CLI config will be used.
     */
    static async init(options, connect = true) {
        utils_1.ConfigurationLoader.registerDotenv(options);
        const coreVersion = await utils_1.ConfigurationLoader.checkPackageVersion();
        const env = utils_1.ConfigurationLoader.loadEnvironmentVars();
        if (!options) {
            options = await utils_1.ConfigurationLoader.getConfiguration();
        }
        let opts = options instanceof utils_1.Configuration ? options.getAll() : options;
        opts = utils_1.Utils.mergeConfig(opts, env);
        await utils_1.ConfigurationLoader.commonJSCompat(opts);
        if ('DRIVER' in this && !opts.driver && !opts.type) {
            opts.driver = this.DRIVER;
        }
        const orm = new MikroORM(opts);
        orm.logger.log('info', `MikroORM version: ${logging_1.colors.green(coreVersion)}`);
        // we need to allow global context here as we are not in a scope of requests yet
        const allowGlobalContext = orm.config.get('allowGlobalContext');
        orm.config.set('allowGlobalContext', true);
        await orm.discoverEntities();
        orm.config.set('allowGlobalContext', allowGlobalContext);
        orm.driver.getPlatform().lookupExtensions(orm);
        connect && (connect = orm.config.get('connect'));
        if (connect) {
            await orm.connect();
        }
        for (const extension of orm.config.get('extensions')) {
            extension.register(orm);
        }
        if (connect && orm.config.get('ensureIndexes')) {
            await orm.getSchemaGenerator().ensureIndexes();
        }
        return orm;
    }
    constructor(options) {
        if (options instanceof utils_1.Configuration) {
            this.config = options;
        }
        else {
            this.config = new utils_1.Configuration(options);
        }
        const discovery = this.config.get('discovery');
        if (discovery.disableDynamicFileAccess) {
            this.config.set('metadataProvider', metadata_1.ReflectMetadataProvider);
            this.config.set('cache', { adapter: cache_1.NullCacheAdapter });
            discovery.requireEntitiesArray = true;
        }
        this.driver = this.config.getDriver();
        this.logger = this.config.getLogger();
        this.discovery = new metadata_1.MetadataDiscovery(new metadata_1.MetadataStorage(), this.driver.getPlatform(), this.config);
    }
    /**
     * Connects to the database.
     */
    async connect() {
        const connection = await this.driver.connect();
        const clientUrl = connection.getClientUrl();
        const dbName = this.config.get('dbName');
        const db = dbName + (clientUrl ? ' on ' + clientUrl : '');
        if (await this.isConnected()) {
            this.logger.log('info', `MikroORM successfully connected to database ${logging_1.colors.green(db)}`);
            if (this.config.get('ensureDatabase')) {
                await this.schema.ensureDatabase();
            }
            await this.driver.init();
        }
        else {
            this.logger.error('info', `MikroORM failed to connect to database ${db}`);
        }
        return this.driver;
    }
    /**
     * Reconnects, possibly to a different database.
     */
    async reconnect(options = {}) {
        /* istanbul ignore next */
        for (const key of Object.keys(options)) {
            this.config.set(key, options[key]);
        }
        await this.driver.reconnect();
    }
    /**
     * Checks whether the database connection is active.
     */
    async isConnected() {
        return this.driver.getConnection().isConnected();
    }
    /**
     * Closes the database connection.
     */
    async close(force = false) {
        return this.driver.close(force);
    }
    /**
     * Gets the `MetadataStorage` (without parameters) or `EntityMetadata` instance when provided with the `entityName` parameter.
     */
    getMetadata(entityName) {
        if (entityName) {
            entityName = utils_1.Utils.className(entityName);
            return this.metadata.get(entityName);
        }
        return this.metadata;
    }
    async discoverEntities() {
        this.metadata = await this.discovery.discover(this.config.get('tsNode'));
        this.driver.setMetadata(this.metadata);
        this.em = this.driver.createEntityManager();
        this.em.global = true;
        this.metadata.decorate(this.em);
        this.driver.setMetadata(this.metadata);
    }
    /**
     * Allows dynamically discovering new entity by reference, handy for testing schema diffing.
     */
    async discoverEntity(entities) {
        entities = utils_1.Utils.asArray(entities);
        const tmp = await this.discovery.discoverReferences(entities);
        const options = this.config.get('discovery');
        new metadata_1.MetadataValidator().validateDiscovered([...Object.values(this.metadata.getAll()), ...tmp], options.warnWhenNoEntities, options.checkDuplicateTableNames);
        const metadata = await this.discovery.processDiscoveredEntities(tmp);
        metadata.forEach(meta => this.metadata.set(meta.className, meta));
        this.metadata.decorate(this.em);
    }
    /**
     * Gets the SchemaGenerator.
     */
    getSchemaGenerator() {
        const extension = this.config.getExtension('@mikro-orm/schema-generator');
        if (extension) {
            return extension;
        }
        // TODO remove in v6 (https://github.com/mikro-orm/mikro-orm/issues/3743)
        /* istanbul ignore next */
        return this.driver.getPlatform().getSchemaGenerator(this.driver, this.em);
    }
    /**
     * Gets the EntityGenerator.
     */
    getEntityGenerator() {
        const extension = this.config.getExtension('@mikro-orm/entity-generator');
        if (extension) {
            return extension;
        }
        // TODO remove in v6 (https://github.com/mikro-orm/mikro-orm/issues/3743)
        return this.driver.getPlatform().getEntityGenerator(this.em);
    }
    /**
     * Gets the Migrator.
     */
    getMigrator() {
        const extension = this.config.getExtension('@mikro-orm/migrator');
        if (extension) {
            return extension;
        }
        // TODO remove in v6 (https://github.com/mikro-orm/mikro-orm/issues/3743)
        return this.driver.getPlatform().getMigrator(this.em);
    }
    /**
     * Gets the SeedManager
     */
    getSeeder() {
        const extension = this.config.getExtension('@mikro-orm/seeder');
        if (extension) {
            return extension;
        }
        // TODO remove in v6 (https://github.com/mikro-orm/mikro-orm/issues/3743)
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const { SeedManager } = require('@mikro-orm/seeder');
        return this.config.getCachedService(SeedManager, this.em);
    }
    /**
     * Shortcut for `orm.getSchemaGenerator()`
     */
    get schema() {
        return this.getSchemaGenerator();
    }
    /**
     * Shortcut for `orm.getSeeder()`
     */
    get seeder() {
        return this.getSeeder();
    }
    /**
     * Shortcut for `orm.getMigrator()`
     */
    get migrator() {
        return this.getMigrator();
    }
    /**
     * Shortcut for `orm.getEntityGenerator()`
     */
    get entityGenerator() {
        return this.getEntityGenerator();
    }
}
exports.MikroORM = MikroORM;
