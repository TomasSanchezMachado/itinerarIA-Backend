"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityTransformer = void 0;
const wrap_1 = require("../entity/wrap");
const Utils_1 = require("../utils/Utils");
const enums_1 = require("../enums");
const SerializationContext_1 = require("./SerializationContext");
function isVisible(meta, propName, ignoreFields = []) {
    const prop = meta.properties[propName];
    const visible = prop && !prop.hidden;
    const prefixed = prop && !prop.primary && propName.startsWith('_'); // ignore prefixed properties, if it's not a PK
    return visible && !prefixed && !ignoreFields.includes(propName);
}
class EntityTransformer {
    static toObject(entity, ignoreFields = [], raw = false) {
        if (!Array.isArray(ignoreFields)) {
            ignoreFields = [];
        }
        const wrapped = (0, wrap_1.helper)(entity);
        let contextCreated = false;
        if (!wrapped.__serializationContext.root) {
            const root = new SerializationContext_1.SerializationContext(wrapped.__serializationContext.populate ?? []);
            SerializationContext_1.SerializationContext.propagate(root, entity, isVisible);
            contextCreated = true;
        }
        const root = wrapped.__serializationContext.root;
        const meta = wrapped.__meta;
        const ret = {};
        const keys = new Set();
        if (meta.serializedPrimaryKey && !meta.compositePK) {
            keys.add(meta.serializedPrimaryKey);
        }
        else {
            meta.primaryKeys.forEach(pk => keys.add(pk));
        }
        if (wrapped.isInitialized() || !wrapped.hasPrimaryKey()) {
            Object.keys(entity).forEach(prop => keys.add(prop));
        }
        const visited = root.visited.has(entity);
        if (!visited) {
            root.visited.add(entity);
        }
        [...keys]
            .filter(prop => raw ? meta.properties[prop] : isVisible(meta, prop, ignoreFields))
            .map(prop => {
            const cycle = root.visit(meta.className, prop);
            if (cycle && visited) {
                return [prop, undefined];
            }
            const val = EntityTransformer.processProperty(prop, entity, raw);
            if (!cycle) {
                root.leave(meta.className, prop);
            }
            return [prop, val];
        })
            .filter(([, value]) => typeof value !== 'undefined')
            .forEach(([prop, value]) => ret[this.propertyName(meta, prop, wrapped.__platform)] = value);
        if (!visited) {
            root.visited.delete(entity);
        }
        if (!wrapped.isInitialized() && wrapped.hasPrimaryKey()) {
            return ret;
        }
        // decorated getters
        meta.props
            .filter(prop => prop.getter && !prop.hidden && typeof entity[prop.name] !== 'undefined')
            .forEach(prop => ret[this.propertyName(meta, prop.name, wrapped.__platform)] = entity[prop.name]);
        // decorated get methods
        meta.props
            .filter(prop => prop.getterName && !prop.hidden && entity[prop.getterName] instanceof Function)
            .forEach(prop => ret[this.propertyName(meta, prop.name, wrapped.__platform)] = entity[prop.getterName]());
        if (contextCreated) {
            root.close();
        }
        return ret;
    }
    static propertyName(meta, prop, platform) {
        if (meta.properties[prop].serializedName) {
            return meta.properties[prop].serializedName;
        }
        if (meta.properties[prop].primary && platform) {
            return platform.getSerializedPrimaryKeyField(prop);
        }
        return prop;
    }
    static processProperty(prop, entity, raw) {
        const wrapped = (0, wrap_1.helper)(entity);
        const property = wrapped.__meta.properties[prop];
        const serializer = property?.serializer;
        if (serializer) {
            return serializer(entity[prop]);
        }
        if (Utils_1.Utils.isCollection(entity[prop])) {
            return EntityTransformer.processCollection(prop, entity, raw);
        }
        if (Utils_1.Utils.isEntity(entity[prop], true)) {
            return EntityTransformer.processEntity(prop, entity, wrapped.__platform, raw);
        }
        if (property.reference === enums_1.ReferenceType.EMBEDDED) {
            if (Array.isArray(entity[prop])) {
                return entity[prop].map(item => {
                    const wrapped = item && (0, wrap_1.helper)(item);
                    return wrapped ? wrapped.toJSON() : item;
                });
            }
            const wrapped = entity[prop] && (0, wrap_1.helper)(entity[prop]);
            return wrapped ? wrapped.toJSON() : entity[prop];
        }
        const customType = property?.customType;
        if (customType) {
            return customType.toJSON(entity[prop], wrapped.__platform);
        }
        return wrapped.__platform.normalizePrimaryKey(entity[prop]);
    }
    static processEntity(prop, entity, platform, raw) {
        const child = entity[prop];
        const wrapped = (0, wrap_1.helper)(child);
        if (raw && wrapped.isInitialized() && child !== entity) {
            return wrapped.toPOJO();
        }
        if (wrapped.isInitialized() && (wrapped.__populated || !wrapped.__managed) && child !== entity && !wrapped.__lazyInitialized) {
            const args = [...wrapped.__meta.toJsonParams.map(() => undefined)];
            return (0, wrap_1.wrap)(child).toJSON(...args);
        }
        return platform.normalizePrimaryKey(wrapped.getPrimaryKey());
    }
    static processCollection(prop, entity, raw) {
        const col = entity[prop];
        if (raw && col.isInitialized(true)) {
            return col.getItems().map(item => (0, wrap_1.wrap)(item).toPOJO());
        }
        if (col.isInitialized(true) && col.shouldPopulate()) {
            return col.toArray();
        }
        if (col.isInitialized()) {
            return col.getIdentifiers();
        }
    }
}
exports.EntityTransformer = EntityTransformer;
