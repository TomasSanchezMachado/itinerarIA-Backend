"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityTransformer = void 0;
const wrap_1 = require("../entity/wrap");
const Utils_1 = require("../utils/Utils");
const enums_1 = require("../enums");
const SerializationContext_1 = require("./SerializationContext");
const RawQueryFragment_1 = require("../utils/RawQueryFragment");
function isVisible(meta, propName, ignoreFields = []) {
    const prop = meta.properties[propName];
    const visible = prop && !prop.hidden;
    const prefixed = prop && !prop.primary && propName.startsWith('_'); // ignore prefixed properties, if it's not a PK
    return visible && !prefixed && !ignoreFields.includes(propName);
}
class EntityTransformer {
    static toObject(entity, ignoreFields = [], raw = false) {
        if (!Array.isArray(ignoreFields)) {
            ignoreFields = [];
        }
        const wrapped = (0, wrap_1.helper)(entity);
        let contextCreated = false;
        if (!wrapped.__serializationContext.root) {
            const root = new SerializationContext_1.SerializationContext(wrapped.__config, wrapped.__serializationContext.populate, wrapped.__serializationContext.fields, wrapped.__serializationContext.exclude);
            SerializationContext_1.SerializationContext.propagate(root, entity, isVisible);
            contextCreated = true;
        }
        const root = wrapped.__serializationContext.root;
        const meta = wrapped.__meta;
        const ret = {};
        const keys = new Set();
        if (meta.serializedPrimaryKey && !meta.compositePK) {
            keys.add(meta.serializedPrimaryKey);
        }
        else {
            meta.primaryKeys.forEach(pk => keys.add(pk));
        }
        if (wrapped.isInitialized() || !wrapped.hasPrimaryKey()) {
            Utils_1.Utils.keys(entity).forEach(prop => keys.add(prop));
        }
        const visited = root.visited.has(entity);
        if (!visited) {
            root.visited.add(entity);
        }
        [...keys]
            .filter(prop => raw ? meta.properties[prop] : isVisible(meta, prop, ignoreFields))
            .map(prop => {
            const populated = root.isMarkedAsPopulated(meta.className, prop);
            const partiallyLoaded = root.isPartiallyLoaded(meta.className, prop);
            const isPrimary = wrapped.__config.get('serialization').includePrimaryKeys && meta.properties[prop].primary;
            if (!partiallyLoaded && !populated && !isPrimary) {
                return [prop, undefined];
            }
            const cycle = root.visit(meta.className, prop);
            if (cycle && visited) {
                return [prop, undefined];
            }
            const val = EntityTransformer.processProperty(prop, entity, raw, populated);
            if (!cycle) {
                root.leave(meta.className, prop);
            }
            if (val instanceof RawQueryFragment_1.RawQueryFragment) {
                throw new Error(`Trying to serialize raw SQL fragment: '${val.sql}'`);
            }
            return [prop, val];
        })
            .filter(([, value]) => typeof value !== 'undefined')
            .forEach(([prop, value]) => ret[this.propertyName(meta, prop, wrapped.__platform, raw)] = value);
        if (!visited) {
            root.visited.delete(entity);
        }
        if (!wrapped.isInitialized() && wrapped.hasPrimaryKey()) {
            return ret;
        }
        // decorated getters
        meta.props
            .filter(prop => prop.getter && prop.getterName === undefined && !prop.hidden && typeof entity[prop.name] !== 'undefined')
            // @ts-ignore
            .forEach(prop => ret[this.propertyName(meta, prop.name, wrapped.__platform, raw)] = this.processProperty(prop.name, entity, raw));
        // decorated get methods
        meta.props
            .filter(prop => prop.getterName && !prop.hidden && entity[prop.getterName] instanceof Function)
            // @ts-ignore
            .forEach(prop => ret[this.propertyName(meta, prop.name, wrapped.__platform, raw)] = this.processProperty(prop.getterName, entity, raw));
        if (contextCreated) {
            root.close();
        }
        return ret;
    }
    static propertyName(meta, prop, platform, raw) {
        if (raw) {
            return prop;
        }
        if (meta.properties[prop].serializedName) {
            return meta.properties[prop].serializedName;
        }
        if (meta.properties[prop].primary && platform) {
            return platform.getSerializedPrimaryKeyField(prop);
        }
        return prop;
    }
    static processProperty(prop, entity, raw, populated) {
        const wrapped = (0, wrap_1.helper)(entity);
        const property = wrapped.__meta.properties[prop];
        const serializer = property?.serializer;
        const value = entity[prop];
        // getter method
        if (entity[prop] instanceof Function) {
            const returnValue = entity[prop]();
            if (serializer && !raw) {
                return serializer(returnValue);
            }
            return returnValue;
        }
        if (serializer && !raw) {
            return serializer(value);
        }
        if (Utils_1.Utils.isCollection(value)) {
            return EntityTransformer.processCollection(prop, entity, raw, populated);
        }
        if (Utils_1.Utils.isEntity(value, true)) {
            return EntityTransformer.processEntity(prop, entity, wrapped.__platform, raw, populated);
        }
        if (Utils_1.Utils.isScalarReference(value)) {
            return value.unwrap();
        }
        if (property.kind === enums_1.ReferenceKind.EMBEDDED) {
            if (Array.isArray(value)) {
                return value.map(item => {
                    const wrapped = item && (0, wrap_1.helper)(item);
                    return wrapped ? wrapped.toJSON() : item;
                });
            }
            const wrapped = value && (0, wrap_1.helper)(value);
            return wrapped ? wrapped.toJSON() : value;
        }
        const customType = property?.customType;
        if (customType) {
            return customType.toJSON(value, wrapped.__platform);
        }
        if (property?.primary) {
            return wrapped.__platform.normalizePrimaryKey(value);
        }
        return value;
    }
    static processEntity(prop, entity, platform, raw, populated) {
        const child = entity[prop];
        const wrapped = (0, wrap_1.helper)(child);
        const meta = wrapped.__meta;
        const visible = meta.primaryKeys.filter(prop => isVisible(meta, prop));
        if (raw && wrapped.isInitialized() && child !== entity) {
            return wrapped.toPOJO();
        }
        function isPopulated() {
            if (wrapped.__populated != null) {
                return wrapped.__populated;
            }
            if (populated) {
                return true;
            }
            return !wrapped.__managed;
        }
        if (wrapped.isInitialized() && isPopulated() && child !== entity) {
            return (0, wrap_1.wrap)(child).toJSON();
        }
        const pk = wrapped.getPrimaryKey(true);
        if (wrapped.__config.get('serialization').forceObject) {
            return Utils_1.Utils.primaryKeyToObject(meta, pk, visible);
        }
        if (Utils_1.Utils.isPlainObject(pk)) {
            const pruned = Utils_1.Utils.primaryKeyToObject(meta, pk, visible);
            if (visible.length === 1) {
                return platform.normalizePrimaryKey(pruned[visible[0]]);
            }
            return pruned;
        }
        return platform.normalizePrimaryKey(pk);
    }
    static processCollection(prop, entity, raw, populated) {
        const col = entity[prop];
        if (raw && col.isInitialized(true)) {
            return col.map(item => (0, wrap_1.helper)(item).toPOJO());
        }
        if (col.shouldPopulate(populated)) {
            return col.toArray();
        }
        if (col.isInitialized()) {
            const wrapped = (0, wrap_1.helper)(entity);
            if (wrapped.__config.get('serialization').forceObject) {
                return col.map(item => {
                    const wrapped = (0, wrap_1.helper)(item);
                    return Utils_1.Utils.primaryKeyToObject(wrapped.__meta, wrapped.getPrimaryKey(true));
                });
            }
            return col.map(i => (0, wrap_1.helper)(i).getPrimaryKey(true));
        }
        return undefined;
    }
}
exports.EntityTransformer = EntityTransformer;
