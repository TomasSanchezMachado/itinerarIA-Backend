"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangeSetType = exports.ChangeSet = void 0;
const util_1 = require("util");
const wrap_1 = require("../entity/wrap");
const Utils_1 = require("../utils/Utils");
class ChangeSet {
    constructor(entity, type, payload, meta) {
        this.entity = entity;
        this.type = type;
        this.payload = payload;
        this.meta = meta;
        this.name = meta.className;
        this.rootName = meta.root.className;
        this.collection = meta.root.collection;
        this.schema = (0, wrap_1.helper)(entity).__schema ?? meta.root.schema;
    }
    getPrimaryKey(object = false) {
        if (!this.originalEntity) {
            this.primaryKey ?? (this.primaryKey = (0, wrap_1.helper)(this.entity).getPrimaryKey(true));
        }
        else if (this.meta.compositePK) {
            this.primaryKey = this.meta.primaryKeys.map(pk => this.originalEntity[pk]);
        }
        else {
            this.primaryKey = this.originalEntity[this.meta.primaryKeys[0]];
        }
        if (object && this.primaryKey != null) {
            const pks = this.meta.compositePK && Utils_1.Utils.isPlainObject(this.primaryKey) ? Object.values(this.primaryKey) : Utils_1.Utils.asArray(this.primaryKey);
            const pkProps = this.meta.getPrimaryProps();
            const ret = this.meta.primaryKeys.reduce((o, pk, idx) => {
                const pkProp = pkProps[idx];
                if (Utils_1.Utils.isPlainObject(pks[idx]) && pkProp.targetMeta) {
                    o[pk] = Utils_1.Utils.getOrderedPrimaryKeys(pks[idx], pkProp.targetMeta);
                    return o;
                }
                o[pk] = pks[idx];
                return o;
            }, {});
            return ret;
        }
        return this.primaryKey ?? null;
    }
    getSerializedPrimaryKey() {
        this.serializedPrimaryKey ?? (this.serializedPrimaryKey = (0, wrap_1.helper)(this.entity).getSerializedPrimaryKey());
        return this.serializedPrimaryKey;
    }
    [util_1.inspect.custom](depth) {
        const object = { ...this };
        const hidden = ['meta', 'serializedPrimaryKey'];
        hidden.forEach(k => delete object[k]);
        const ret = (0, util_1.inspect)(object, { depth });
        const name = `${this.constructor.name}<${this.meta.className}>`;
        /* istanbul ignore next */
        return ret === '[Object]' ? `[${name}]` : name + ' ' + ret;
    }
}
exports.ChangeSet = ChangeSet;
var ChangeSetType;
(function (ChangeSetType) {
    ChangeSetType["CREATE"] = "create";
    ChangeSetType["UPDATE"] = "update";
    ChangeSetType["DELETE"] = "delete";
    ChangeSetType["UPDATE_EARLY"] = "update_early";
    ChangeSetType["DELETE_EARLY"] = "delete_early";
})(ChangeSetType || (exports.ChangeSetType = ChangeSetType = {}));
