"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnsureRequestContext = exports.CreateRequestContext = void 0;
const MikroORM_1 = require("../MikroORM");
const RequestContext_1 = require("../utils/RequestContext");
const EntityManager_1 = require("../EntityManager");
const EntityRepository_1 = require("../entity/EntityRepository");
function CreateRequestContext(getContext, respectExistingContext = false) {
    return function (target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = async function (...args) {
            // reuse existing context if available
            if (RequestContext_1.RequestContext.currentRequestContext()) {
                return originalMethod.apply(this, args);
            }
            /* istanbul ignore next */
            let orm;
            let em;
            if (typeof getContext === 'function') {
                orm = await (getContext(this) ?? this.orm);
            }
            else if (getContext) {
                orm = await getContext;
            }
            else {
                orm = await this.orm;
                em = await this.em;
            }
            if (em instanceof EntityManager_1.EntityManager) {
                return await RequestContext_1.RequestContext.create(em, () => {
                    return originalMethod.apply(this, args);
                });
            }
            if (orm instanceof EntityRepository_1.EntityRepository) {
                return await RequestContext_1.RequestContext.create(orm.getEntityManager(), () => {
                    return originalMethod.apply(this, args);
                });
            }
            if (!(orm instanceof MikroORM_1.MikroORM)) {
                const name = respectExistingContext ? 'EnsureRequestContext' : 'CreateRequestContext';
                throw new Error(`@${name}() decorator can only be applied to methods of classes with \`orm: MikroORM\` property, \`em: EntityManager\` property, or with a callback parameter like \`@${name}(() => orm)\` that returns one of those types. The parameter will contain a reference to current \`this\`. Returning an EntityRepository from it is also supported.`);
            }
            return await RequestContext_1.RequestContext.create(orm.em, () => {
                return originalMethod.apply(this, args);
            });
        };
        return descriptor;
    };
}
exports.CreateRequestContext = CreateRequestContext;
function EnsureRequestContext(getContext) {
    return CreateRequestContext(getContext, true);
}
exports.EnsureRequestContext = EnsureRequestContext;
